type: edu
files:
  - name: src/banking/MainBank.java
    visible: true
    text: |
      package banking;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Scanner;
      
      public class MainBank {
          static List<String> list = new ArrayList<>();
          private static final Scanner scanner = new Scanner(System.in);
      
          public static void main(String[] args) {
      
              System.out.println("Username:");
              list.add(getInput());
      
              System.out.println("Password:");
              list.add(getInput());
      
              System.out.println();
              System.out.println("Enter the data again to complete the registration");
      
              System.out.println("Username:");
              String login = getInput();
      
              System.out.println("Password:");
              String pass = getInput();
      
              var name = list.get(0).equals(login);
              var pas = list.get(1).equals(pass);
      
              if (name && pas) {
                  System.out.println(System.lineSeparator() + "Congratulations on your successful registration!");
              } else if (!name && !pas) {
                  System.out.println("Username and password don't match.");
              } else {
                  if (!pas) {
                      System.out.println("Passwords don't match.");
                  } else {
                      System.out.println("Username doesn't match.");
                  }
              }
              scanner.close();
          }
      
          private static String getInput() {
              return scanner.nextLine().strip().trim();
          }
      }
    learner_created: false
  - name: test/LocalServer.java
    visible: false
    text: |-
      import com.sun.net.httpserver.HttpExchange;
      import com.sun.net.httpserver.HttpHandler;
      import com.sun.net.httpserver.HttpServer;
      
      import java.io.IOException;
      import java.io.OutputStream;
      import java.net.InetSocketAddress;
      import java.util.Arrays;
      import java.util.Random;
      
      public class LocalServer { //Create local server for testing
          public final String CONFIRM = "ASDcvv14Dfvv67539a551345n2l34kjklhv012";
      
          private final StringBuilder responseBuilder = new StringBuilder();
      
          public LocalServer() {
              try {
                  HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);
                  server.createContext("/hyperskill-exchange/api", new CurrencyExchangeHandler());
                  server.setExecutor(Runnable::run);
                  server.start();
      
                  for (String s : Arrays.asList("EUR", "GBP", "UAH", "CNY")) {
                      responseBuilder.append(getFakeApiResponse(s)).append("\n");
                  }
              } catch (Exception e) {
                  throw new RuntimeException(e);
              }
          }
      
          private String getFakeApiResponse(String currency) {
              String num;
              if (currency.equalsIgnoreCase("EUR")) {
                  num = "0.9" + (random(49) + 49);
              } else if (currency.equalsIgnoreCase("GBP")) {
                  num = "0.7" + (random(59) + 39);
              } else if (currency.equalsIgnoreCase("UAH")) {
                  num = "36." + (random(599) + 399);
              } else {
                  num = "7." + (random(100) + 99);
              }
              return String.format("{\"rates\":{\"USD\":%s},\"base\":\"%s\"}", num, currency);
          }
      
          private int random(int range) {
              return new Random().nextInt(range);
          }
      
          private class CurrencyExchangeHandler implements HttpHandler {
      
              @Override
              public void handle(HttpExchange exchange) throws IOException {
                  String[] uris = exchange.getRequestURI().toString().split("/");
      
                  if (uris.length == 4) {
                      String apiKey = uris[uris.length - 1].replace("latest.json?app_id=", "");
                      if (uris[3].startsWith("latest.json") && apiKey.equals(CONFIRM)) {
                          exchange.getResponseHeaders().set("Content-Type", "application/json");
                          String response = responseBuilder.toString();
                          exchange.sendResponseHeaders(200, response.length());
                          OutputStream os = exchange.getResponseBody();
                          os.write(response.getBytes());
                          os.close();
                      } else {
                          String response = "Invalid key: " + apiKey;
                          exchange.sendResponseHeaders(404, response.length());
                          OutputStream os = exchange.getResponseBody();
                          os.write(response.getBytes());
                          os.close();
                      }
                  } else {
                      String response = "Invalid request";
                      exchange.sendResponseHeaders(400, response.length());
                      OutputStream os = exchange.getResponseBody();
                      os.write(response.getBytes());
                      os.close();
                  }
              }
          }
      }
    learner_created: false
  - name: test/MainBankTest.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import javax.crypto.SecretKeyFactory;
      import javax.crypto.spec.PBEKeySpec;
      import java.io.BufferedReader;
      import java.io.File;
      import java.io.IOException;
      import java.io.InputStreamReader;
      import java.net.HttpURLConnection;
      import java.net.MalformedURLException;
      import java.net.ProtocolException;
      import java.net.URL;
      import java.nio.file.Files;
      import java.nio.file.Path;
      import java.security.MessageDigest;
      import java.security.NoSuchAlgorithmException;
      import java.security.spec.InvalidKeySpecException;
      import java.util.*;
      import java.util.regex.Pattern;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      
      public class MainBankTest extends StageTest<String> {
          private final HashSet<String> currency = new HashSet<>(List.of("EUR", "GBP", "UAH", "CNY"));
          private String testingFirstLogin;
          private String testingFirstPassword;
      
          private String testingSecondLogin;
          private String testingSecondPassword;
      
          private String testingThirdLogin;
          private String testingThirdPassword;
          private String getCurrency;
          private final File FILE = new File("userData.txt");
          private TestedProgram main;
      
          @DynamicTest
          CheckResult test1() {
              Runnable runnable = LocalServer::new;
              runnable.run();
              getCurrency = initLocalServer();
              try {
                  Files.writeString(FILE.toPath(), "");
              } catch (IOException e) {
                  throw new WrongAnswer("Before testing file 'userData.txt' must be empty! Failed to access file.");
              }
              startInit();
              testingFirstLogin = generatePhone(true);
              testingFirstPassword = generatePassword(true);
      
              testingSecondLogin = generatePhone(true);
              testingSecondPassword = generatePassword(true);
      
              testingThirdLogin = generatePhone(true);
              testingThirdPassword = generatePassword(true);
              initNewPerson(testingFirstLogin, testingFirstPassword);
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult test2() {
              startInit();
              String output = main.execute("1");
      
              majorTestingMethod("Authorization", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
              authorize(testingFirstLogin, testingFirstPassword);
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult test3() {
              startInit();
              var login = "+1-321-555-1111";
              var password = "Tt123!";
              String output = main.execute("1");
              majorTestingMethod("Authorization", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
      
              output = main.execute(login);
              majorTestingMethod("Password:", 1, 1, output);
      
              output = main.execute(password);
              majorTestingMethod("The entered password does not match the login or the user does not exist.", 3, 1, output);
              majorTestingMethod("Login:", 3, 3, output);
      
              authorize(testingFirstLogin, testingFirstPassword);
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult test4() {
              startInit();
              for (int i = 0; i < randomize(13); i++) {
                  String output = main.execute("");
                  majorTestingMethod("Invalid input, try again '1 or 2':", 1, 1, output);
                  output = main.execute(forAnyCase[new Random().nextInt(forAnyCase.length - 1)].toString().replaceAll("\\d", ""));
                  majorTestingMethod("Invalid input, try again '1 or 2':", 1, 1, output);
              }
              initNewPerson(testingSecondLogin, testingSecondPassword);
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult test5() {
              startInit();
              String output = main.execute("2");
              majorTestingMethod("Registration", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
      
              output = main.execute(testingThirdLogin);
              majorTestingMethod("Password:", 1, 1, output);
              output = main.execute(testingThirdPassword);
              majorTestingMethod("Enter the data again to complete the registration.", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
      
              //      for line equal to Password
              output = main.execute(generatePhone(true));
              majorTestingMethod("Password:", 1, 1, output);
              //Login and password don't match.
      
              output = main.execute(generatePassword(true));
              majorTestingMethod("Login and password don't match.", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
              output = main.execute(generatePhone(true));
              majorTestingMethod("Password:", 1, 1, output);
              output = main.execute(testingThirdPassword);
              majorTestingMethod("Login doesn't match.", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
              output = main.execute(testingThirdLogin);
              majorTestingMethod("Password:", 1, 1, output);
              output = main.execute(generatePassword(true));
              majorTestingMethod("Password doesn't match.", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
      
              output = main.execute(testingThirdLogin);
              majorTestingMethod("Password:", 1, 1, output);
              output = main.execute(testingThirdPassword);
              majorTestingMethod("Congratulations on your successful registration!", 5, 1, output);
              majorTestingMethod("Now you can log in!", 5, 2, output);
              majorTestingMethod("Authorization", 5, 4, output);
              majorTestingMethod("Login:", 5, 5, output);
      
              for (int i = 0; i < 2; i++) {
                  output = main.execute(testingThirdLogin);
                  majorTestingMethod("Password:", 1, 1, output);
                  output = main.execute(generatePassword(true));
                  majorTestingMethod("The entered password does not match the login or the user does not exist.", 3, 1, output);
      
                  majorTestingMethod("Login:", 3, 3, output);
              }
              authorize(testingThirdLogin, testingThirdPassword);
              return CheckResult.correct();
          }
      
          private void correctCurrency(String login, String password) {
              startInit();
              String output = main.execute("1");
              majorTestingMethod("Authorization", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
      
              output = main.execute(login);
              majorTestingMethod("Password:", 1, 1, output);
      
              output = main.execute(password);
              majorTestingMethod("Authorization successful.", 5, 1, output);
              if (output.split("\n")[2].length() > 60) {
                  throw new WrongAnswer("Your creativity '" + output.split("\n")[2].length() + "' - exceeds the 60 character limit, try shortening the message a bit");
              }
              majorTestingMethod("Menu", 5, 4, output);
              majorTestingMethod("1. Exchange rates, 2. Logout", 5, 5, output);
      
              output = main.execute("1");
              majorTestingMethod("Exchange rates", 2, 1, output);
              majorTestingMethod("1. EUR, 2. GBP, 3. UAH, 4. CNY, 5. Back", 2, 2, output);
              for (int i = 0; i < randomize(10); i++) {
                  output = main.execute(forAnyCase[new Random().nextInt(forAnyCase.length - 1)].toString().replaceAll("\\d", ""));
                  majorTestingMethod("Incorrect currency code, try again.", 2, 1, output);
                  majorTestingMethod("(1. EUR, 2. GBP, 3. UAH, 4. CNY, or 5. Back):", 2, 2, output);
              }
          }
      
          @DynamicTest(repeat = 50)
          CheckResult test6() {
              correctCurrency(testingFirstLogin, testingFirstPassword);
              var random = randomize(currency.size());
              int getCurrencyNum = random == 0 ? random + 1 : random;
              String output = main.execute(String.valueOf(getCurrencyNum));
      
              String compare = null;
              for (var set : currency) {
                  if (output.split("\n")[0].contains(set)) {
                      compare = parseExchangeRate(getCurrency, set);
                      break;
                  }
              }
      
              if (compare != null && !compare.toLowerCase().trim().equals(output.split("\n")[0].toLowerCase().trim())) {
                  throw new WrongAnswer("Your output of this currency does not match the HTTP request from our local server, Your HTTP response: '" + output.split("\n")[0] + "'\n" + "Correct HTTP response: " + compare + "\nAlso, do not forget about the correct apikey, case is important! apiKey -" + apiKey);
              }
              majorTestingMethod("Would you like to choose another currency? (Y/N)", 3, 3, output);
              for (int j = 0; j < randomize(7) + 3; j++) {
                  output = main.execute(forAnyCase[new Random().nextInt(forAnyCase.length - 1)].toString().replaceAll("[yYnN]", "NO I AM NOT"));
                  majorTestingMethod("Invalid input! (Y/N)", 1, 1, output);
              }
              output = main.execute("y");
      
              majorTestingMethod("1. EUR, 2. GBP, 3. UAH, 4. CNY, 5. Back", 1, 1, output);
              output = main.execute("5");
      
              majorTestingMethod("Menu", 2, 1, output);
              majorTestingMethod("1. Exchange rates, 2. Logout", 2, 2, output);
              for (int i = 0; i < randomize(10); i++) {
                  output = main.execute(forAnyCase[randomize(forAnyCase.length - 1)].toString().replaceAll("[1-2]", "NO I AM NOT"));
                  majorTestingMethod("Invalid choice. Please enter a valid option number '1' or '2':", 1, 1, output);
              }
              output = main.execute("2");
              majorTestingMethod("Goodbye", 1, 1, output);
      
              if (!main.isFinished()) {
                  throw new WrongAnswer("Your program should finish");
              }
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult test7() {
      
              correctCurrency(testingSecondLogin, testingSecondPassword);
              String output;
              for (int i = 1; i < 5; i++) {
                  for (int j = 0; j < 3; j++) {
                      int getCurrencyNum = randomize(currency.size()) + 1;
                      output = main.execute(String.valueOf(getCurrencyNum));
      
                      String compare = null;
                      for (var set : currency) {
                          if (output.split("\n")[0].contains(set)) {
                              compare = parseExchangeRate(getCurrency, set);
                              break;
                          }
                      }
      
                      if (compare != null && !compare.toLowerCase().trim().equals(output.split("\n")[0].toLowerCase().trim())) {
                          throw new WrongAnswer("Your output of this currency does not match the HTTP request from our local server, Your HTTP response: '" + output.split("\n")[0] + "'\n" + "Correct HTTP response: " + compare + "\nAlso, do not forget about the correct apikey, case is important! apiKey -" + apiKey);
                      }
                      majorTestingMethod("Would you like to choose another currency? (Y/N)", 3, 3, output);
                      output = main.execute("y");
                      majorTestingMethod("1. EUR, 2. GBP, 3. UAH, 4. CNY, 5. Back", 1, 1, output);
                  }
                  output = main.execute("5");
                  majorTestingMethod("Menu", 2, 1, output);
                  majorTestingMethod("1. Exchange rates, 2. Logout", 2, 2, output);
      
                  output = main.execute("1");
                  majorTestingMethod("Exchange rates", 2, 1, output);
                  majorTestingMethod("1. EUR, 2. GBP, 3. UAH, 4. CNY, 5. Back", 2, 2, output);
      
                  output = main.execute(String.valueOf(i));
      
                  String compare = null;
                  for (var set : currency) {
                      if (output.split("\n")[0].contains(set)) {
                          compare = parseExchangeRate(getCurrency, set);
                          break;
                      }
                  }
      
                  if (compare != null && !compare.toLowerCase().trim().equals(output.split("\n")[0].toLowerCase().trim())) {
                      throw new WrongAnswer("Your output of this currency does not match the HTTP request from our local server, Your HTTP response: '" + output.split("\n")[0] + "'\n" + "Correct HTTP response: " + compare + "\nAlso, do not forget about the correct apikey, case is important! apiKey -" + apiKey);
                  }
                  majorTestingMethod("Would you like to choose another currency? (Y/N)", 3, 3, output);
                  output = main.execute("y");
                  majorTestingMethod("1. EUR, 2. GBP, 3. UAH, 4. CNY, 5. Back", 1, 1, output);
              }
      
              output = main.execute("5");
              majorTestingMethod("Menu", 2, 1, output);
              majorTestingMethod("1. Exchange rates, 2. Logout", 2, 2, output);
      
              output = main.execute("2");
              majorTestingMethod("Goodbye", 1, 1, output);
      
              if (!main.isFinished()) {
                  throw new WrongAnswer("Your program should finish");
              }
              return CheckResult.correct();
          }
      
          @DynamicTest(repeat = 10)
      //(feedback = "Testing when correct login")
          CheckResult test8() {
              startInit();
              String output = main.execute("2");
              majorTestingMethod("Registration", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
      
              output = main.execute(generatePhone(false));
              majorTestingMethod("Wrong login format, try again", 2, 1, output);
              return CheckResult.correct();
          }
      
          @DynamicTest(repeat = 10)
      //(feedback = "Testing output when correct password format")
          CheckResult test9() {
              startInit();
              String output = main.execute("2");
              majorTestingMethod("Registration", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
              output = main.execute(generatePhone(true));
              majorTestingMethod("Password:", 1, 1, output);
      
              output = main.execute(generatePassword(false));
              majorTestingMethod("Wrong password format, try again", 2, 1, output);
      
              return CheckResult.correct();
          }
      
      //(feedback = "Testing output when failed registration")
      
          @DynamicTest
          CheckResult test10() {
              for (int i = 0; i < 3; i++) {
                  startInit();
                  String output = main.execute("1");
                  majorTestingMethod("Authorization", 2, 1, output);
                  majorTestingMethod("Login:", 2, 2, output);
      
                  output = main.execute(generatePhone(true));
                  majorTestingMethod("Password:", 1, 1, output);
                  output = main.execute(generatePassword(true));
                  majorTestingMethod("The entered password does not match the login or the user does not exist.", 3, 1, output);
      
                  majorTestingMethod("Login:", 3, 3, output);
      
              }
              authorize(testingSecondLogin, testingSecondPassword);
              return CheckResult.correct();
          }
      //(feedback = "Testing the output of random greeting phrases against the given parameters")
      
          @DynamicTest(repeat = 30)
          CheckResult test11() {
      
              startInit();
              String output = main.execute("1");
              majorTestingMethod("Authorization", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
              authorize(testingFirstLogin, testingFirstPassword);
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult test12() {
              startInit();
              String output = main.execute("1");
              majorTestingMethod("Authorization", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
              output = main.execute(testingFirstLogin);
              majorTestingMethod("Password:", 1, 1, output);
              output = main.execute(generatePassword(true));
              majorTestingMethod("The entered password does not match the login or the user does not exist.", 3, 1, output);
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult test13() {
              startInit();
              String output = main.execute("1");
              majorTestingMethod("Authorization", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
              output = main.execute(testingSecondLogin);
              majorTestingMethod("Password:", 1, 1, output);
              for (int i = 0; i < 2; i++) {
                  output = main.execute(generatePassword(true));
                  majorTestingMethod("The entered password does not match the login or the user does not exist.", 3, 1, output);
                  output = main.execute(testingSecondLogin);
                  majorTestingMethod("Password:", 1, 1, output);
              }
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult test14() {
              startInit();
              String output = main.execute("1");
              majorTestingMethod("Authorization", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
              output = main.execute(testingThirdLogin);
              majorTestingMethod("Password:", 1, 1, output);
              output = main.execute(generatePassword(true));
              majorTestingMethod("The entered password does not match the login or the user does not exist.", 3, 1, output);
              return CheckResult.correct();
          }
      
          //(feedback = "Testing userData file")
          @DynamicTest
          CheckResult test15() {
              fileTesting(testingFirstLogin, testingFirstPassword, 1);
              return CheckResult.correct();
          }
      
          //(feedback = "Testing userData file")
          @DynamicTest
          CheckResult test16() {
              fileTesting(testingSecondLogin, testingSecondPassword, 2);
              return CheckResult.correct();
          }
      
          //(feedback = "Testing userData file")
          @DynamicTest
          CheckResult test17() {
              fileTesting(testingThirdLogin, testingThirdPassword, 3);
              return CheckResult.correct();
          }
      
          private void fileTesting(String login, String password, int accessCount) {
              startInit();
              String output = main.execute("1");
      
              majorTestingMethod("Authorization", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
      
              List<String> userData;
              try {
                  userData = Files.readAllLines(Path.of(FILE.getPath()));
              } catch (IOException e) {
                  throw new WrongAnswer("Unable to read userData.txt file or file was not found: " + e.getMessage());
              }
      
              if (userData.size() != 3) {
                  throw new WrongAnswer("""
                          The userData.txt file should contain data about three users who were registered during the tests.
                          Users data must start on a new line.
                          Example:
                          Login: +(1) 123 123 3333| Password: H7zhSEcK3ATrndB7gvJmd5Zbqtiwk9lrhcyeHhUEk5Y=| Salt: pTXvgvjebxPh2qLRqIdvoZuX8TxyR3u+ZEoRhFubgG8=| Registration time: 2023-06-01 17:26| Last authorization session: 2023-06-01 17:26| Access: [Unsuccessful access attempt - 2023-08-01 11:26, Unsuccessful access attempt - 2023-08-01 12:26, Unsuccessful access attempt - 2023-08-01 13:26]
                          Login: 1 342 343 5544| Password: Of9ciui/5d/Tlv94m+cVCx5wdWG1QbRqMldPRNSvnvc=| Salt: DRySPA7xv3oTxBzFDUTgzkuDGVSxlioRizzuxlQ7xXM=| Registration time: 2023-06-01 17:27| Last authorization session: 2023-06-01 17:27| Access: [Unsuccessful access attempt - 2023-01-01 13:26]
                          Login: +1 123 111 2244| Password: +cJpNBhVw/9nklUJiGl36h6acxPPVN3ceKY8Yqf5HsY=| Salt: YxEDuvdMheUUlhU7vUdA3Omr0S4zUx4Zj85+qlAy9d8=| Registration time: 2023-06-01 17:27| Last authorization session: 2023-06-01 17:27| Access: []
                          """);
              }
      
              String testingUser = null;
              String[] line = null;
              for (var user : userData) {
                  line = user.split("\\| ");
                  if (line.length != 6) {
                      throw new WrongAnswer("The userData.txt The file must contain user data, each of which consists of 6 sections,\n" + " the sections must be separated by this character - '|' Each new user starts on a new line.");
                  }
      //          'Login' section testing
                  if (!line[0].startsWith("Login:")) {
                      throw new WrongAnswer("The string containing user data must start with 'Login:' but your string output equals - " + line[0]);
                  }
                  if (line[0].replaceAll("\\D", "").equals(login.replaceAll("\\D", ""))) {
                      testingUser = user;
                      break;
                  }
              }
      
      //          'Salt and Password' sections testing
              String savedHashedPassword = line[1].substring(10);
              byte[] savedSalt = Base64.getDecoder().decode(line[2].substring(6));
              if (!verifyPassword(password, savedSalt, savedHashedPassword)) {
                  throw new WrongAnswer("""
                          The password and salt was not saved in the database, or it was not saved correctly.
                          Example correct password and salt:
                          Password: MuIpL4JJbjRpTGdg2oMawHWMEt91AiLxGFgoiw8yjC8=| Salt: Ypt72qwV6/5QXKcmG84WJ/dfnydrlxy1v+ajBBfKE/0=|
                          Where '|' is a delimiter.""");
              }
      
      //          'Registration time' section testing
              String[] attempts = getAttempts(line);
              List<String> access = new ArrayList<>();
              Collections.addAll(access, attempts);
              if (access.size() != accessCount) {
                  throw new WrongAnswer("""
                                                Data 'Access' section was not saved in the database, or it was not saved correctly.
                                                Example correct user data save:
                                                Login: +(1)-944-201-1476| Password: Z/TEmztuN3P1BxeAD/SzP5N7zTXDK0x0dJe5dckgBks=| Salt: ccWkx8kddf935lXn9GtZ4CktR12XfdDJUX0WQkSGZ2M=| Registration time: 2023-08-27 18:15| Last authorization session: 2023-08-27 18:15| Access: [Unsuccessful access attempt - 2023-08-27 18:15]
                                                Your string -\s
                                                """ + testingUser);
              }
      
              if (testingUser == null) {
                  throw new WrongAnswer("The user being tested does not exist in the database,but was registered during the tests." + " Login: " + login);
              }
              authorize(login, password);
          }
      
          private static String[] getAttempts(String[] line) {
              String registrationTimeSection = line[3].substring(19);
              String timeRegex = "\\d{1,4}[/\\\\\\s:\\-]\\d{1,2}[/\\\\\\s:\\-]\\d{1,4} \\d{1,2}[\\s:\\-]\\d{1,2}([\\s:\\-]\\d{1,2})?$";
              if (!registrationTimeSection.matches(timeRegex)) {
                  throw new WrongAnswer("The Registration time section was not saved in the database, or it was not saved correctly.");
              }
      
      //          'Last authorization session' section testing
              if (!line[4].substring(28).matches(timeRegex)) {
                  throw new WrongAnswer("The 'Last authorization session' section was not saved in the database, or it was not saved correctly.");
              }
      
      //          'Access' section testing
              String accessLine = line[5].substring(8);
              return accessLine.substring(1, accessLine.length() - 1).split(", ");
          }
      
          private void startInit() {
              main = new TestedProgram();
              var getInput = main.start().trim().split("\\n");
      
              if (getInput.length != 2) {
                  throw new WrongAnswer("Your program should print " + 2 + " lines but it printed " + getInput.length + " line(s).");
              }
              if (!Pattern.matches("^would you like to login or register[?!.:]?$", getInput[0].toLowerCase())) {
                  throw new WrongAnswer("Your program should print " + "Would you like to login or register?" + " lines but it printed '" + getInput[0] + "' string.");
              }
              if (!Pattern.matches("^1\\.? login, 2\\.? register[?.:]?\\s?$", getInput[1].toLowerCase())) {
                  throw new WrongAnswer("Your program should print " + "1. Login, 2. Register:" + " lines but it printed " + getInput[1] + " string.");
              }
          }
      
          private void authorize(String login, String password) {
              String output = main.execute(login);
              majorTestingMethod("Password:", 1, 1, output);
      
              output = main.execute(password);
              majorTestingMethod("Authorization successful.", 5, 1, output);
      
              if (output.split("\n")[2].length() > 60) {
                  throw new WrongAnswer("Your creativity '" + output.split("\n")[2].length() + "' - exceeds the 60 character limit, try shortening the message a bit");
              }
              majorTestingMethod("Menu", 5, 4, output);
              majorTestingMethod("1. Exchange rates, 2. Logout", 5, 5, output);
              output = main.execute("2");
              majorTestingMethod("Goodbye", 1, 1, output);
      
              if (!main.isFinished()) {
                  throw new WrongAnswer("Your program should finish");
              }
          }
      
          private void initNewPerson(String login, String password) {
      //      for line equal to Password
              String output = main.execute("2");
              majorTestingMethod("Registration", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
      
              output = main.execute(login);
              majorTestingMethod("Password:", 1, 1, output);
      //      for line equal to "reg again and log in"
              output = main.execute(password);
              majorTestingMethod("Enter the data again to complete the registration.", 2, 1, output);
              majorTestingMethod("Login:", 2, 2, output);
      //      for line equal to Password
              output = main.execute(login);
              majorTestingMethod("Password:", 1, 1, output);
      //      for line equal congratulations, now you can and log in
              output = main.execute(password);
              majorTestingMethod("Congratulations on your successful registration!", 5, 1, output);
              majorTestingMethod("Now you can log in!", 5, 2, output);
      
              majorTestingMethod("Authorization", 5, 4, output);
              majorTestingMethod("Login:", 5, 5, output);
              authorize(login, password);
          }
      
          private void majorTestingMethod(String correctOutput, int correctNumberOfLines, int testableOutputTextOnLineNumbered, String output) {
              String looseTestes = "[!.]?$";
              String looseTestes2 = "(don['`]?t)|(doesn['`]?t)";
              String orRegex = "['\"()]?";
              String yOrN = "\\s?['\"(]y[,.\\s/]?n['\")][!.:]?$";
              var outputLines = expect(output).toContain(correctNumberOfLines).lines();
      
              String[] executeText = outputLines.toArray(new String[0]);
      
              String check = executeText[testableOutputTextOnLineNumbered - 1].trim();// If outputLines does not match the expected number of lines, the test will not reach [outputTextInLineNumber - 1], now it's safe.
      
              String[] regexes = {"^enter[a-z\\s]+?again[a-z\\s]+?complete[a-z\\s]+?registrations?" + looseTestes //0
                      , "^passwords? " + looseTestes2 + " match" + looseTestes //1
                      , "^logins? " + looseTestes2 + " match" + looseTestes //2
                      , "^logins? and passwords? " + looseTestes2 + " match" + looseTestes,   //3
                      "^congratulations? on your? successful registrations?" + looseTestes, //4
                      "^login:$", //5
                      "^password:$", //6
      
                      "^authorization successful" + looseTestes, //7
                      "^authorization failed" + looseTestes, //8
                      "^wrong login format,? try again" + looseTestes, //9
                      "^wrong password format,? try again" + looseTestes, //10
                      "^login is already taken,? try (another login)?(again)?" + looseTestes, //11
                      "^now you can log\\s?in" + looseTestes, //12
                      "^registration\\.?$", //13
      
                      "^would you like to login or register[?!.:]?$", //14
                      "^1\\.? login, 2\\.? register[?.:]?$", //15
                      "^invalid input, try again ['\"()]?1 or 2['\"()]?[?!.:]?$", //16
                      "^goodbye" + looseTestes, //17
                      "^invalid choice\\.?,? please enter a valid option number " + orRegex + "1" + orRegex + " or " + orRegex + "2" + orRegex + "\\.?:?$", //18
                      "^the entered password does not match the login or the user does not exist" + looseTestes, //19
                      "^authorization" + looseTestes, //20
      
                      "^menu" + looseTestes, //21
                      "^1[.]?\\s?exchange rates?,? 2[.]?\\s?logout[?.:]?$",  //22
                      "^exchange rates[:.]?$", "^1[.]? EUR, 2[.]? GBP, 3[.]? UAH, 4[.]? CNY, 5[.]? Back[?.:]?$", "^\\(1\\. EUR, 2\\. GBP, 3\\. UAH, 4\\. CNY\\.?,? or 5\\. Back\\):?\\.?!?$", //23
                      "^incorrect currency code,? try again" + looseTestes, //24
                      "^would you like to choose another currency\\?" + yOrN, //25
                      "^invalid input[!.,]" + yOrN //26
              };
              for (String regex : regexes) {
                  var pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);
                  if (pattern.matcher(correctOutput).find()) {
                      if (pattern.matcher(check).find()) {
                          return;
                      }
                  }
              }
              throw new WrongAnswer("Your program should print '" + correctOutput + "' but it printed '" + check + "'");
          }
      
          private final Object[] forAnyCase = {"!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+", "[", "]", "{", "}", "|", "\\", ";", ":", "'", "\"", ",", ".", "<", ">", "/", "?", "`", "~", " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
      
          private String generatePassword(boolean isCheck) {
              Random random = new Random();
              StringBuilder passwordBuilder = new StringBuilder();
              int length = randomize(19) + 7;
              String output;
              while (true) {
                  for (int i = 0; i < length; i++) {
                      var forLoginNReg = forAnyCase[random.nextInt(forAnyCase.length)];
                      passwordBuilder.append(forLoginNReg);
                  }
                  output = passwordBuilder.toString();
                  if (isCheck) {
                      if (validatePassword(output)) {
                          break;
                      }
                  } else {
                      if (!validatePassword(output)) {
                          break;
                      }
                  }
                  passwordBuilder.setLength(0);
              }
              return output;
          }
      
          private String generatePhone(boolean isCheck) {
              String login = "";
              while (true) {
                  if (isCheck) {
      
                      int rand = randomize(3);
                      switch (rand) {
                          case 0 ->
                                  login = String.format("+(1)-%s-%s-%s", generateRandomDigits(3), generateRandomDigits(3), generateRandomDigits(4));
                          case 1 ->
                                  login = String.format("(1) %s %s %s", generateRandomDigits(3), generateRandomDigits(3), generateRandomDigits(4));
                          case 2 ->
                                  login = String.format("1%s%s%s", generateRandomDigits(3), generateRandomDigits(3), generateRandomDigits(4));
                          default -> {
                          }
                      }
                      if (validatePhone(login)) {
                          break;
                      }
                  } else {
                      login = String.format("+(%s)-%s-%s-%s", generateRandomAnyCase(2), generateRandomAnyCase(3), generateRandomAnyCase(3), generateRandomAnyCase(4));
                      if (!validatePhone(login)) {
                          break;
                      }
      
                  }
      
              }
              return login;
          }
      
          private String generateRandomDigits(int length) {
              StringBuilder sb = new StringBuilder();
              for (int i = 0; i < length; i++) {
                  sb.append(randomize(10));
              }
              return sb.toString();
          }
      
          private String generateRandomAnyCase(int length) {
              StringBuilder sb = new StringBuilder();
              for (int i = 0; i < length; i++) {
                  sb.append(forAnyCase[randomize(forAnyCase.length)]);
              }
              return sb.toString();
          }
      
          private boolean validatePhone(String phoneNumber) {
              // Checking all requirements
              Pattern pattern = Pattern.compile("^\\+?\\(?1\\)?[-\\s]?\\d{3}[-\\s]?\\d{3}[-\\s]?\\d{4}$");
              boolean isMatch = pattern.matcher(phoneNumber).matches();
              // Checking the length
              phoneNumber = phoneNumber.replaceAll("\\D", "");
              boolean lengthCase = phoneNumber.length() == 11;
              // result
              return isMatch && lengthCase;
          }
      
          private boolean validatePassword(String password) {
              return password.length() >= 6 && password.length() <= 28 // Valid password length
                     && password.replaceAll("[a-zA-Z\\d!@#$%\\s]", "").isEmpty() // Valid characters
                     && password.matches(".*[A-Z].*") // At least one capital letter
                     && password.matches(".*[a-z].*") // At least one lowercase letter
                     && password.matches(".*\\d.*") // At least one digit
                     && !password.matches("^\\s.*|^.*\\s$"); // Space start or end
          }
      
          private boolean verifyPassword(String password, byte[] salt, String hashedPassword) {
              byte[] enteredPasswordHash = hashPassword(password, salt);
              // Decode stored hashed password from Base64 format
              byte[] savedPasswordHash = Base64.getDecoder().decode(hashedPassword);
              return MessageDigest.isEqual(savedPasswordHash, enteredPasswordHash);
          }
      
          private byte[] hashPassword(String password, byte[] salt) {
              char[] passwordChars = password.toCharArray();
      
              int KEY_LENGTH = 256;
              int ITERATIONS = 10000;
              PBEKeySpec spec = new PBEKeySpec(passwordChars, salt, ITERATIONS, KEY_LENGTH);
      
              SecretKeyFactory keyFactory;
              try {
                  keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
                  return keyFactory.generateSecret(spec).getEncoded();
              } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
                  throw new WrongAnswer("""
                          Error initializing the class - SecretKeyFactory
                          The class is initialized as follows: SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
                          Check the method: hashPassword(), строка: 475
                          """);
              }
          }
      
          protected final String apiKey = "ASDcvv14Dfvv67539a551345n2l34kjklhv012";
      
          private String parseExchangeRate(String responseBody, String currency) {
              String[] exchangeRate = responseBody.split("\"}");
              String res = null;
              for (var rate : exchangeRate) {
                  if (rate.contains(currency)) {
                      res = rate.replaceAll("[^\\d.]", "");
                      break;
                  }
              }
              return "Currency exchange: USD to " + currency + " exchange rate: " + res;
          }
      
          private String initLocalServer() {
              StringBuilder response = new StringBuilder();
              HttpURLConnection connection = null;
              int responseCode;
              try {
                  connection = getHttpURLConnection();
                  connection.setConnectTimeout(5000);
                  connection.connect();
                  responseCode = connection.getResponseCode();
      
                  if (responseCode == HttpURLConnection.HTTP_OK) {
                      try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                          String line;
                          while ((line = reader.readLine()) != null) {
                              response.append(line);
                          }
                      } catch (IOException e) {
                          throw new RuntimeException(e);
                      }
                  }
              } catch (IOException e) {
                  throw new RuntimeException(e);
              } finally {
                  if (connection != null) {
                      connection.disconnect();
                  }
              }
              return response.toString();
          }
      
          private HttpURLConnection getHttpURLConnection() {
              URL url;
              try {
                  url = new URL("http://localhost:8080/hyperskill-exchange/api/latest.json?app_id=" + apiKey);
              } catch (MalformedURLException e) {
                  throw new RuntimeException(e);
              }
              HttpURLConnection connection;
              try {
                  connection = (HttpURLConnection) url.openConnection();
              } catch (IOException e) {
                  throw new RuntimeException(e);
              }
              try {
                  connection.setRequestMethod("GET");
              } catch (ProtocolException e) {
                  throw new RuntimeException(e);
              }
              return connection;
          }
      
          private int randomize(int i) {
              return new Random().nextInt(i);
          }
      }
    learner_created: false
  - name: src/banking/Helpers.java
    visible: true
    text: |
      package banking;
      
      import java.util.Random;
      import java.util.Scanner;
      
      public class Helpers {
      
          static String getInput(Scanner scanner) {
              return scanner.nextLine().strip().trim();
          }
      
          public static int getRandomIndex(int length) {
              Random random = new Random();
              return random.nextInt(length);
          }
      
      
          static String cleanLogin(String login) {
              var loginStringBuilder = new StringBuilder();
      
              for (char ch : login.toCharArray()) {
                  String chStr = String.valueOf(ch);
                  if (chStr.matches("\\d")) {
                      loginStringBuilder.append(chStr);
                  }
              }
              return loginStringBuilder.toString();
          }
      }
    learner_created: true
  - name: src/banking/Validators.java
    visible: true
    text: |
      package banking;
      
      public class Validators {
      
          public static boolean isValidPhoneNumber(String phoneNumber) {
              String pattern = "^\\+?1?(?:-?\\(\\d{1,3}\\)-?|\\s?\\d{1,3}(?:-?\\d{3}){3})$";
              return phoneNumber.matches(pattern);
          }
      
          public static boolean isValidPassword(String password) {
              String pattern = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d!@#$%]+(\\s?[a-zA-Z\\d!@#$%]+)*$";
              return password.matches(pattern) && password.length() >= 6 && password.length() <= 28;
          }
      }
    learner_created: true
  - name: src/banking/PasswordUtils.java
    visible: true
    text: |
      package banking;
      
      import javax.crypto.SecretKeyFactory;
      import javax.crypto.spec.PBEKeySpec;
      import java.security.NoSuchAlgorithmException;
      import java.security.SecureRandom;
      import java.security.spec.InvalidKeySpecException;
      import java.util.Base64;
      
      public class PasswordUtils {
      
          private static final int SALT_LENGTH = 16;
          private static final int ITERATIONS = 10000;
          private static final int KEY_LENGTH = 256;
      
          // Method for generating salt
          public static byte[] generateSalt() {
              SecureRandom random = new SecureRandom();
              byte[] salt = new byte[SALT_LENGTH];
              random.nextBytes(salt);
              return salt;
          }
      
          // Method for password hashing
          public static String hashPassword(String password, byte[] salt) {
              char[] passwordChars = password.toCharArray();
              PBEKeySpec spec = new PBEKeySpec(passwordChars, salt, ITERATIONS, KEY_LENGTH);
              try {
                  SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
                  byte[] hash = factory.generateSecret(spec).getEncoded();
                  return Base64.getEncoder().encodeToString(hash);
              } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
                  e.printStackTrace(); // Handle error appropriately
                  return null;
              }
          }
      
          // Method for registration
          public static String register(String password) {
              byte[] salt = generateSalt();
              return hashPassword(password, salt);
          }
      
          // Method for password verification
          public static boolean verifyPassword(String enteredPassword, String storedPassword, byte[] salt) {
              String hashedEnteredPassword = hashPassword(enteredPassword, salt);
              return hashedEnteredPassword != null && hashedEnteredPassword.equals(storedPassword);
          }
      
      }
    learner_created: true
  - name: src/banking/UserList.java
    visible: true
    text: |
      package banking;
      
      import java.io.*;
      import java.time.LocalDateTime;
      import java.time.format.DateTimeFormatter;
      import java.util.*;
      
      import static banking.PasswordUtils.*;
      
      public class UserList {
          private ArrayList<UserDetail> users;
      
          static List<UserDetail> getUserDetailList(String filePath) {
              DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
              File file = new File(filePath);
              List<UserDetail> userDetailList = new ArrayList<>();
              // System.out.printf("File = %s\n", file);
      
              String fieldsSeparator = "\\|";
              String keyValueSeparator = ": ";
      
              try (Scanner scanner = new Scanner(file)) {
                  while (scanner.hasNext()) {
                      UserDetail userDetail = new UserDetail();
      
                      String line = scanner.nextLine();
                      List<String> fields = List.of(line.split(fieldsSeparator));
                      // System.out.printf("fields = %s\n", fields);
                      for (String field : fields) {
                          // Process the field
                          List<String> fieldKeyValue = List.of(field.split(keyValueSeparator));
                          String key = fieldKeyValue.get(0).trim();
                          String value = fieldKeyValue.get(1).trim();
                          // System.out.printf("|%s:%s|\n", key, value);
      
                          switch (key) {
                              case "Login" -> userDetail.setLogin(value);
                              case "Password" -> userDetail.setPassword(value);
                              case "Salt" -> userDetail.setSalt(value);
                              case "Registration time" ->
                                      userDetail.setRegistrationTime(LocalDateTime.parse(value, formatter));
                              case "Last authorization session" ->
                                      userDetail.setLastAuthorizationSession(LocalDateTime.parse(value, formatter));
                              case "Access" -> {
                                  ArrayList<LocalDateTime> accessDateTimes = getAccessLocalDateTimes(value, formatter);
                                  userDetail.setAccess(accessDateTimes);
                              }
                          }
                      }
                      userDetailList.add(userDetail);
      
                  }
              } catch (FileNotFoundException e) {
                  System.out.println("No file found: " + "userData.txt");
              }
      
              // System.out.println(userDetailList);
              return userDetailList;
          }
      
          private static ArrayList<LocalDateTime> getAccessLocalDateTimes(String value, DateTimeFormatter formatter) {
              if (Objects.equals(value.trim(), "[]")) {
                  return new ArrayList<LocalDateTime>();
              }
              ArrayList<LocalDateTime> accessDateTimes = new ArrayList<LocalDateTime>();
              String valueSubstr = value.substring(1, value.length() - 1);
              List<String> unsuccessfulAccesses = List.of(valueSubstr.split(","));
              for (String access : unsuccessfulAccesses) {
                  LocalDateTime accessDateTime = LocalDateTime.parse(access.split(" - ")[1].trim(), formatter);
                  accessDateTimes.add(accessDateTime);
              }
              return accessDateTimes;
          }
      
          static void addUserDetailToFile(String username, String password, String filePath) throws IOException {
              DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
      
              LocalDateTime currentDateTime = LocalDateTime.now();
              String formattedDateTime = currentDateTime.format(formatter);
              byte[] saltBytes = generateSalt();
      
              String hashPassword = hashPassword(password, saltBytes);
              String salt = Base64.getEncoder().encodeToString(saltBytes);
              String access = "[]";
      
              try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {
      
                  String line = "Login: " + username.trim() +
                          "| Password: " + hashPassword +
                          "| Salt: " + salt +
                          "| Registration time: " + formattedDateTime +
                          "| Last authorization session: " + formattedDateTime +
                          "| Access: " + access;
      
                  writer.write(line);
                  writer.newLine(); // Add a newline after the line
              }
          }
      }
    learner_created: true
  - name: src/banking/UserDetail.java
    visible: true
    text: |
      package banking;
      
      import java.time.LocalDateTime;
      import java.util.ArrayList;
      
      public class UserDetail {
          private String login;
          private String password;
          private String salt;
          private LocalDateTime registrationTime;
          private LocalDateTime lastAuthorizationSession;
          private ArrayList<LocalDateTime> access;
      
          public UserDetail() {
          }
      
          public UserDetail(String login, String password, String salt,
                            LocalDateTime registrationTime, LocalDateTime lastAuthorizationSession,
                            ArrayList<LocalDateTime> access) {
              this.login = login;
              this.password = password;
              this.salt = salt;
              this.registrationTime = registrationTime;
              this.lastAuthorizationSession = lastAuthorizationSession;
              this.access = access;
          }
      
          // Getters
          public String getLogin() {
              return login;
          }
      
          public String getPassword() {
              return password;
          }
      
          public String getSalt() {
              return salt;
          }
      
          public LocalDateTime getRegistrationTime() {
              return registrationTime;
          }
      
          public LocalDateTime getLastAuthorizationSession() {
              return lastAuthorizationSession;
          }
      
          public ArrayList<LocalDateTime> getAccess() {
              return access;
          }
      
          // Setters
          public void setLogin(String login) {
              this.login = login;
          }
      
          public void setPassword(String password) {
              this.password = password;
          }
      
          public void setSalt(String salt) {
              this.salt = salt;
          }
      
          public void setRegistrationTime(LocalDateTime registrationTime) {
              this.registrationTime = registrationTime;
          }
      
          public void setLastAuthorizationSession(LocalDateTime lastAuthorizationSession) {
              this.lastAuthorizationSession = lastAuthorizationSession;
          }
      
          public void setAccess(ArrayList<LocalDateTime> access) {
              this.access = access;
          }
      
          public void addToAccess(LocalDateTime invalid) {
              if (this.access.size() < 3) {
                  this.access.add(invalid);
              } else {
                  this.access.remove(0);
                  this.access.add(invalid);
              }
          }
      
          @Override
          public String toString() {
              StringBuilder sb = new StringBuilder();
              sb.append("UserDetail {");
              sb.append("\n\tlogin : ").append(login).append(", ");
              sb.append("\n\tpassword : ").append(password).append(", ");
              sb.append("\n\tsalt : ").append(salt).append(", ");
              sb.append("\n\tregistrationTime : ").append(registrationTime).append(", ");
              sb.append("\n\tlastAuthorizationSession : ").append(lastAuthorizationSession).append(", ");
              sb.append("\n\taccess : ").append(getAccess());
              sb.append("\n}");
              return sb.toString();
          }
      }
    learner_created: true
  - name: userData.txt
    visible: true
    text: |
      Login: 16132498614| Password: 50iVRa97/HCHUPrGyGbVSg0A7eV5SnKq4nTqgl+M12s=| Salt: yLgs5VPkIHx6cPE4kAO/9A==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 10696181021| Password: jKpvTH2/TyRZ99gI9RHQGXYELsyyAxQ8fbdAfNQyd0s=| Salt: 0B0XXPaiffCvN0bRfTAWuQ==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 13573363904| Password: ymuVwS5sZHRU3YlMA9I/BRB6LoUdoKx99SwvWph8wBM=| Salt: FAl7atNBes9/EFTH9hI45Q==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 14718523801| Password: P1jqAJbBwEC3LltbVB9jmTwbAJgYHo8EH/i1CYVplDQ=| Salt: jScqaJJzwB4mENNsw8yFEw==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 19689052219| Password: R+wCOGgPpoUh+OIZj4gf3QrMhPknowVBCbJGkiwkhw4=| Salt: CtXGc+WQKXO3FMDslD3Vgw==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 16418275461| Password: 3WZ1KdhJi2sbBNO1depu8Xw7gitnpb+yfvJg8IvZCIQ=| Salt: VhPLh5jV5QEoEhhcEZ3RtA==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 16854619485| Password: 1C54VDtBov+e254HADBePflMBdBFOShS7HqPN+8GbIw=| Salt: HtTRyyRIY48bDpyG+OTsxA==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 12312247295| Password: n91mmRe2FDVQdObibBYqkrAqM+UcaorbZZsrxaRiYKs=| Salt: L+S7KNbWH3cYQm9hmWVf9Q==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 16026753087| Password: wNtvZ/WZ0nMsIr6oQ07j+bdJOse+yufkHlHdsUNygrA=| Salt: EMEjHDKGMKggzY/iBymU+g==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 11065447184| Password: iPb8DYechyEhTmkCAevlc/L4s5lseOda3GPpU3+ZLSU=| Salt: R6lX5lcBhwlKBZ4Ce8OZZw==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 19290346209| Password: T97/jNVeEip7hacbFpMocRharSw6X1YO2LnuM+kbnJA=| Salt: R732I8z6GLvjSyZ/I8Qf+g==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 19297734307| Password: vsCGMgvQcOgxcPS3/Q/NMBCJiwbbQ+WNtu6Hfkb/v4Q=| Salt: OyywYsCpuWrem/z3Hg1PeA==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 18767695096| Password: +91OJbTkSKBSW60M6f3KA4MQGbHY6LRdv4BqEZSVaA8=| Salt: ONInsQTLY259P6F7exGdHQ==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 18415231955| Password: x5VsMV1TxFlRwXRgjyYxit8IOrwaISJXHNsgvtC1fvQ=| Salt: xHqg2+Lj+T/dK8xX+uhNxA==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 14923620482| Password: ZKzcBIkJXmBOtsoo1jC/gIjCvtIrZiNvDlICzNBJMVc=| Salt: CB9HQK6cJ5pO6YhH+RRwjg==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 17398516514| Password: Fyhb6CuUHj8AUYQ3S/0mZ8qOJZVHx+rgbveqRog41k8=| Salt: Al9x1Vw07TMWp8QfACUuFg==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 16982201212| Password: sLYGBuKCBSwk1EQMI49p+0DEi6RGkpO8rNsZDjRfT2M=| Salt: 8e207mIOkqZWxn0dcoI8/Q==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 17660985434| Password: 1sVgOYDBdRH6fDjLmQ+0yEvWsPM2i1a2p+h2qviQ0y8=| Salt: kaCDGtTU/nI/BjkzCwqLLg==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 13445293295| Password: XF+e5Lum5S9Pak0j36yozM7Xb1e0r6O64Zto+RCwBew=| Salt: DshbjqRv8zpkhknlyZOvmw==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 12275328421| Password: v8TlJTWQ3TPXqUT3Rl0wWLwAra0mlFgwIo5hZCGD8SI=| Salt: ecp9clwOAp04r5PkrV0ruQ==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 16452715609| Password: xwAkqFlWp9osFUHI0Qvqk8BJcgNqOzp6MSnAdQfNXdE=| Salt: e9nOIOrcCVEFff2ZlCk2+g==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 16891924146| Password: vlv42LQiB0caccvXCtYgEE3KmnkpBG5YFIxeWAoDEmQ=| Salt: RHR0kFtAjnwSpGGAh+r9Jg==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 15385088116| Password: rkWSxR3xd3FfT/XgKIV/khP2qYAuYOkhzpc2rfPyun0=| Salt: FyA7g0dr6ZYZkXIbeRlL8Q==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 18583514183| Password: eFxiyLZwCS+qclIbmG/Pz9lFxfIzFX8o32TzX2go6zw=| Salt: 8xyimMQmRfrkIv1nnBRZpw==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 10641900685| Password: +NqPQepRMhDtFeeYmQansshUXw8ctFgGfiEuNjXv5dA=| Salt: 4jKYnUTMo5nhgRxP1DS2vA==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 10526836185| Password: hdvOn0bHqy5TsotEjLU1QYm3V8Fqr9IhjTJAuldE86A=| Salt: QviNGUXG0PTxldmINredYA==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 11867351274| Password: zel+yAzd5652TQSOFnCesv1DhF05rayYVHyBkHVn1Rg=| Salt: YqIPf+eeeCupI0fhtXeVfg==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 11254776156| Password: 7zPpqbkFQb1Gv08gGRJQtyH2ZBQGH68gJdisKWniEMw=| Salt: 5uhDToUucD3101LyUR+1Rg==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
      Login: 19474646793| Password: gUPPYTIjb8fT/XfrNo4oevtpboj0fOiHfcvICeoIJkk=| Salt: gP+wpalnMgl3eWm+PZ81Zw==| Registration time: 2024-03-09 19:27| Last authorization session: 2024-03-09 19:27| Access: []
    learner_created: true
  - name: src/banking/UserInteractions.java
    visible: true
    text: |
      package banking;
      
      import java.io.IOException;
      import java.util.*;
      import java.util.stream.Collectors;
      
      import static banking.Helpers.*;
      import static banking.PasswordUtils.hashPassword;
      import static banking.UserList.addUserDetailToFile;
      import static banking.UserList.getUserDetailList;
      import static banking.Validators.isValidPassword;
      import static banking.Validators.isValidPhoneNumber;
      
      public class UserInteractions {
      
          private static final String[] loginGreetings = {
                  "Welcome to your personal banking",
                  "Welcome back!",
                  "We've been waiting for you!",
                  "Good to see you!",
                  "ZZzzzzZ... ERROR... It's a joke, it's ok, welcome back!"
          };
      
          static void registrationChoiceMenu(Scanner scanner, List<UserDetail> userDetailList, String filePath) throws IOException {
              String login = "";
              String password = "";
      
              System.out.println("Registration");
              List<String> usernames = userDetailList.stream().map(UserDetail::getLogin).collect(Collectors.toList());
              login = getLoginInputRecursive(usernames, scanner);
              password = getPasswordInputRecursive(scanner);
      
              addUserDetailToFile(login, password, filePath);
      
              userDetailList = getUserDetailList(filePath);
              usernames = userDetailList.stream().map(UserDetail::getLogin).collect(Collectors.toList());
              System.out.println();
      
              System.out.println("Enter the data again to complete the registration");
              while (true) {
                  System.out.println("Login:");
                  String loginTrial = cleanLogin(getInput(scanner));
      
                  System.out.println("Password:");
                  String passwordTrial = getInput(scanner);
      
                  if (!login.equalsIgnoreCase(loginTrial) && !password.equalsIgnoreCase(passwordTrial)) {
                      System.out.println();
                      System.out.println("Login and password don't match.");
                  } else if (!login.equalsIgnoreCase(loginTrial)) {
                      System.out.println();
                      System.out.println("Login doesn't match.");
                  } else if (!password.equalsIgnoreCase(passwordTrial)) {
                      System.out.println();
                      System.out.println("Passwords don't match");
                  }
      
                  if (login.equalsIgnoreCase(loginTrial) && password.equalsIgnoreCase(passwordTrial)) {
                      break;
                  }
              }
      
              System.out.println();
              System.out.println("Congratulations on your successful registration!");
              System.out.println("Now you can log in!");
              System.out.println();
      
              while (true) {
                  System.out.println("Authorization");
                  System.out.println("Login:");
                  String loginFinish = cleanLogin(getInput(scanner));
      
                  System.out.println("Password:");
                  String passwordFinish = getInput(scanner);
      
                  if (login.equalsIgnoreCase(loginFinish) && password.equalsIgnoreCase(passwordFinish)) {
                      successAuthorizationRandomText();
                      menuAfterSuccessLogin(scanner);
                      break;
                  } else {
                      System.out.println("The entered password does not match the login or the user does not exist.");
                  }
              }
          }
      
          static void loginChoice(Scanner scanner, List<UserDetail> userDetailList, String filePath) throws IOException {
      
              while (true) {
                  System.out.println("Authorization");
                  System.out.println("Login:");
                  String loginInput = cleanLogin(getInput(scanner));
      
                  Optional<UserDetail> userDetailOptional= userDetailList.stream()
                          .filter(userDetail -> Objects.equals(userDetail.getLogin(), loginInput))
                          .findFirst();
                  String userDetailLogin = userDetailOptional.map(UserDetail::getLogin).orElse(null);
      
      
                  System.out.println("Password:");
                  String passwordInput = getInput(scanner);
                  String userDetailPassword = userDetailOptional.map(UserDetail::getPassword).orElse(null);
                  String userDetailSalt = userDetailOptional.map(UserDetail::getSalt).orElse(null);
                  byte[] saltBytes = Base64.getDecoder().decode(userDetailSalt);
                  String hashOfPasswordInput = hashPassword(passwordInput, saltBytes);
      
                  if (!Objects.equals(userDetailLogin, loginInput) || !Objects.equals(userDetailPassword, hashOfPasswordInput)) {
                      System.out.println("The entered password does not match the login or the user does not exist.");
                  } else {
                      break;
                  }
              }
      
              successAuthorizationRandomText();
              menuAfterSuccessLogin(scanner);
          }
      
          static void successAuthorizationRandomText() {
              System.out.println("Authorization successful");
              System.out.println();
              int randomIndex = getRandomIndex(loginGreetings.length);
              String randomGreeting = loginGreetings[randomIndex];
              System.out.println(randomGreeting);
          }
      
          static void menuAfterSuccessLogin(Scanner scanner) {
              System.out.println("Menu");
              System.out.println("1. Logout");
              while (true) {
                  String choice = getInput(scanner);
                  if (Objects.equals("1", choice)) {
                      System.out.println("Goodbye");
                      return;
                  } else {
                      System.out.println("Invalid choice. Please enter a valid option number '1':");
                  }
              }
          }
      
          static String getLoginInputRecursive(List<String> usernames, Scanner scanner) {
              System.out.println("Login:");
              String login = cleanLogin(getInput(scanner));
      
              if (!isValidPhoneNumber(login)) {
                  System.out.println("Wrong login format, try again");
                  return getLoginInputRecursive(usernames, scanner);
              }
      
              if (usernames.contains(login) || usernames.contains("+" + login)) {
                  System.out.println("Login is already taken, try another login");
                  return getLoginInputRecursive(usernames, scanner);
              }
      
              return login;
          }
      
          static String getPasswordInputRecursive(Scanner scanner) {
              System.out.println("Password:");
              String password = getInput(scanner).trim();
              if (!isValidPassword(password)){
                  System.out.println("Wrong password format, try again");
                  return getPasswordInputRecursive(scanner);
              }
              return password;
          }
      }
    learner_created: true
  - name: src/banking/ExchangeRates.java
    visible: true
    learner_created: true
  - name: src/banking/Rate.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/386/stages/2298/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 09 Mar 2024 20:09:06 UTC"
record: 4
